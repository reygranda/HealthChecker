"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// deno-lint-ignore-file no-explicit-any
const dntShim = __importStar(require("./_dnt.shims.js"));
class Plausible {
    constructor(key, site, url) {
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "https://plausible.com"
        });
        Object.defineProperty(this, "key", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "site", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.key = key;
        this.site = site;
        if (url) {
            // Remove the / if it has been accidentally provided
            if (url.charAt(url.length) === "/")
                url = url.slice(0, -1);
            this.url = url;
        }
    }
    async getAbstract(path, params = new URLSearchParams()) {
        // Append the standard site ID to every request
        params.append("site_id", this.site);
        // Construct the endpoint URL and fetch the results
        const endpoint = `${this.url}/${path}?${params}`;
        const response = await dntShim.fetch(endpoint, {
            method: `GET`,
            headers: {
                "Authorization": `Bearer ${this.key}`,
                "Content-Type": `application/json`,
            },
        });
        // Throw the error if the API has provided one
        const parsed = await response.json();
        if (parsed.error)
            throw new Error(parsed.error);
        // Otherwise just return the results
        return parsed;
    }
    /**
     * This function returns the number of current visitors on your site. A current visitor is defined as a visitor who triggered a pageview on your site in the last 5 minutes.
     */
    getRealtime() {
        return this.getAbstract(`api/v1/stats/realtime/visitors`);
    }
    /**
     * This function aggregates metrics over a certain time period. If you are familiar with the Plausible dashboard, this function corresponds to the top row of stats that include Unique Visitors, Pageviews, Bounce rate and Visit duration. You can retrieve any number and combination of these metrics in one request.
     */
    async getAggregate(period, metric, compare, filters) {
        const params = new URLSearchParams();
        params.append(`period`, period);
        params.append(`metrics`, metric);
        if (compare)
            params.append(`compare`, "previous_period");
        if (filters)
            params.append("filters", filters);
        const response = await this.getAbstract(`api/v1/stats/aggregate`, params);
        if (response.results.visitors)
            return response.results.visitors;
        if (response.results.pageviews)
            return response.results.pageviews;
        if (response.results.bounce_rate)
            return response.results.bounce_rate;
        return response.results.visit_duration;
    }
    /**
     * This function provides timeseries data over a certain time period. If you are familiar with the Plausible dashboard, this function corresponds to the main visitor graph.
     */
    async getTimeseries(period, metric, filters, interval) {
        const params = new URLSearchParams();
        params.append(`period`, period);
        if (metric)
            params.append(`metrics`, metric);
        if (filters)
            params.append(`filters`, filters);
        if (interval)
            params.append("interval", interval);
        const response = await this.getAbstract(`api/v1/stats/timeseries`, params);
        return response.results;
    }
    /**
     * This function allows you to breakdown your stats by some property. If you are familiar with SQL family databases, this function corresponds to running GROUP BY on a certain property in your stats.
     *
     * Check out the [properties](https://plausible.io/docs/stats-api#properties) section for a reference of all the properties you can use in this query.
     */
    async getBreakdown(period, metric, property, filter, limit, page) {
        const params = new URLSearchParams();
        params.append(`period`, period);
        params.append(`metrics`, metric);
        params.append(`property`, property);
        if (filter)
            params.append(`filters`, filter);
        if (page)
            params.append("page", page.toString());
        if (limit)
            params.append("limit", limit.toString());
        const response = await this.getAbstract(`api/v1/stats/breakdown`, params);
        return response.results;
    }
}
exports.default = Plausible;
